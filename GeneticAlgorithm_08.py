# -*- coding: utf-8 -*-
"""Tupro 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13JJXEI2QRLTBY_IQao_AyJiRNF8fLmgP

TUGAS PEMROGRAMAN AI 1

**GENETIC ALGORITHM**

Nama Kelompok : 
1. Dewa Made Wijaya (1301204106)
2. Alif Faidhil Ahmad (1301204141)
"""

import matplotlib.pyplot as plt
import math
import random

"""**Ketetapan yang digunakan**"""

ProbCross = 0.7 #probabilitas pada crossover
probMutation = 0.3 #probabilitas pada mutation
pjgKrom = 30 #satu kromosom terdapat 30 gen 
Populasi = 80 #jumlah dari populasi 
JumGen = 60  #banyak generasi atau yang akan menjadi kriteria penghentian evolusi  
JY = {"min" : -5, "max" : 5} #range dari nilai x 
AH = {"min" : -5, "max" : 5} #range dari nilai y

"""**Fungsi**"""

#rumus fungsi yang diberikan pada soal 
def fungsi(x, y):
    return(((math.cos(x)+ math.sin(y))**2)/ ((x)**2 + (y)**2))

#fungsi untuk menentukan nilai fitness minimum 
def fitness_score(x, y):
    return 1/(0.05+(fungsi(x, y)))

#fungsi untuk banyaknya populasi
def buat_populasi(pjgKrom, n):
    population = []
    for i in range(n):
        kromosom = []
        for j in range(pjgKrom):
            kromosom.append(random.randint(0, 1))
        population.append(kromosom)
    return population

def decode_kromosom(kromosom,JY,AH):
    tengah = len(kromosom)//2 #titik potong kromosom

    #menghitung x 
    #sesuai dengan rumusnya (g1.(2^-1) + g2.(2^-2) + ... + gi.(2^-i)) 
    AJ = 0 
    tengah_x = kromosom[:tengah]
    for i in range(1, tengah+1): 
        AJ = AJ + (tengah_x[i-1] * (2**-i)) 

    #menghitung y 
    #sesuai dengan rumusnya (g1.(2^-1) + g2.(2^-2) + ... + gi.(2^-i)) 
    JA = 0
    tengah_y = krom[tengah:]
    for i in range(1, tengah+1):
        JA = JA + (tengah_y[i-1] * (2**-i))
    
    #menghitung total dari  2^-i
    total = sum([2**-(i) for i in range(1, tengah+1)])

    #menghitung nilai keseluruhan 
    x = JY["min"] + (AJ * (JY["max"] - JY["min"]) / total)
    y = AH["min"] + (JA * (AH["max"] - AH["min"]) / total)

    return x, y

#Seleksi orang tua menggunakan teknik tournament selection
def tournament_selection(pop, fitness):
    ortu_terbaik = random.sample(list(zip(pop,fitness)),random.randint(2, Populasi))
    ortu_terbaik = sorted(ortu_terbaik,key= lambda k:k[1],reverse=True)
    return [ortu_terbaik[0][0], ortu_terbaik[1][0]]

def crossover(p1, p2, probCross):
    c1 = p1
    c2 = p2
    if random.random() <= probCross:
        cross = random.randint(1, (pjgKrom)-1) #untuk menentukan dimana titik potongnya 
        c1 = p1[:cross] + p2[cross:]
        c2 = p2[:cross] + p1[cross:]
    return c1, c2

def mutasi(Kromosom, probMut):
    for i in range(len(Kromosom)):
        if random.random() <= probMut:
            if Kromosom[i] == 0:
                Kromosom[i] = 1
            else:
                Kromosom[i] = 0
    return Kromosom

def elitisme(populasi, fit):
    el = zip(populasi, fit)
    el = sorted(el,key= lambda k:k[1],reverse=True)
    return [el[0][0], el[1][0]]

"""**Main Program**"""

#Main Program
print("FINALISASI HASIL")
print(" ")
bestfitness = []
pop = buat_populasi(pjgKrom, Populasi)
for i in range(JumGen):
    fitness = []
    for krom in pop:
        x, y = decode_kromosom(krom, JY, AH)
        fitness.append(fitness_score(x, y))
    bestfitness.append(max(fitness))
    newPop = elitisme(pop, fitness)
    print(f"Generasi ke : {i+1}")
    print(f"Kromosom : {newPop[0]}, \nfitness score : {max(bestfitness)}, \n(x, y) : {decode_kromosom(pop[0], JY, AH)}")
    while len(newPop) < Populasi:
        [parent1, parent2] = tournament_selection(pop.copy(), fitness)
        child1, child2 = crossover(parent1.copy(), parent2.copy(), ProbCross)
        child1 = mutasi(child1, probMutation)
        child2 = mutasi(child2, probMutation)
        newPop.append(child1)
        newPop.append(child2)
    pop = newPop
    print(" ")
  

      
print(" ")    
print("----------------------BEST SOLUTION----------------------")
best = list(zip(pop, (fitness)))
print(" Best Fitness  => ", best[0][1])
print(" Best Kromosom => ", best[0][0])
print("(x, y) : ", decode_kromosom(best[0][0], JY, AH))  

print(" ")

plt.plot(bestfitness)
plt.title("Perubahan nilai Fitness")
plt.xlabel("Generasi")
plt.show()

plt.hist(bestfitness)
plt.title("Perubahan nilai Fitness")